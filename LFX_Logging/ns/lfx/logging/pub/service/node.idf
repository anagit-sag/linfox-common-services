<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">interface</value>
  <value name="node_nsName">lfx.logging.pub.service</value>
  <value name="is_public">false</value>
  <value name="shared">Ci8vIFdoZXRoZXIgY29uZmlndXJlKCkgaGFzIGJlZW4gcnVuCnByaXZhdGUgc3RhdGljIGJvb2xl
YW4gY29uZmlndXJlZCA9IGZhbHNlOyAKCi8vIExvZ2dlciBjb250ZXh0IGZvciBhbGwgTGZ4TG9n
Z2VyIGxvZ2dpbmcKcHJpdmF0ZSBzdGF0aWMgTG9nZ2VyQ29udGV4dCBjb250ZXh0ID0gbmV3IExv
Z2dlckNvbnRleHQoKTsKCi8vIFN0b3JlcyB0aGUgcm9vdCBjb250ZXh0IElEIGluIHRocmVhZCBs
b2NhbCBzdG9yYWdlCnByaXZhdGUgc3RhdGljIFRocmVhZExvY2FsPFN0cmluZz4gbGFzdFJvb3RD
b250ZXh0SUQgPSBuZXcgVGhyZWFkTG9jYWw8U3RyaW5nPigpOyAKCnB1YmxpYyBlbnVtIExldmVs
IHsgRVJST1IsIFdBUk4sIElORk8sIERFQlVHLCBUUkFDRSB9OwpwdWJsaWMgc3RhdGljIGZpbmFs
IFN0cmluZyBERUZBVUxUX0xFVkVMID0gIklORk8iOwoKcHJpdmF0ZSBzdGF0aWMgU3RyaW5nIHN1
YnN0aXR1dGVWYXJpYWJsZXMoU3RyaW5nIG1lc3NhZ2VUZW1wbGF0ZSkgewoJUGF0dGVybiB2YXJQ
YXR0ZXJuID0gUGF0dGVybi5jb21waWxlKCJcXCRcXHsoW2EtekEtWjAtOV8uJF0rKVxcfSIpOwoJ
TWF0Y2hlciBtID0gdmFyUGF0dGVybi5tYXRjaGVyKG1lc3NhZ2VUZW1wbGF0ZSk7CglTdHJpbmdC
dWZmZXIgc2IgPSBuZXcgU3RyaW5nQnVmZmVyKCk7Cgl3aGlsZSAobS5maW5kKCkpIHsKCQkvL1N0
cmluZyBtZGNLZXkgPSBtLmdyb3VwKCk7CgkJU3RyaW5nIG1kY0tleSA9IG0uZ3JvdXAoMSk7CgkJ
U3RyaW5nIG1kY1ZhbCA9IE1EQy5nZXQobWRjS2V5KTsKCQlpZiAobWRjVmFsICE9IG51bGwgJiYg
IW1kY1ZhbC5pc0VtcHR5KCkpIHsKCQkJbS5hcHBlbmRSZXBsYWNlbWVudChzYiwgTWF0Y2hlci5x
dW90ZVJlcGxhY2VtZW50KG1kY1ZhbCkpOwoJCX0KCX0KCW0uYXBwZW5kVGFpbChzYik7CglyZXR1
cm4gc2IudG9TdHJpbmcoKTsKfQoKcHJpdmF0ZSBzdGF0aWMgUmVzb3VyY2VCdW5kbGUgZ2V0UmVz
b3VyY2VCdW5kbGUoKSB7CgkvLyBHZXQgKHBhcmVudCkgc2VydmljZSB0aGF0IG1hZGUgdGhlIGxv
ZyBzdGF0ZW1lbnQKCU5TU2VydmljZSBwYXJlbnQgPSBTZXJ2aWNlLmdldENhbGxpbmdTZXJ2aWNl
KCk7CglpZiAocGFyZW50ID09IG51bGwpIHsKCQlwYXJlbnQgPSBTZXJ2aWNlLmdldFNlcnZpY2VF
bnRyeSgpOwoJfQoJCgkvLyBHZXQgdGhhdCBwYWNrYWdlIGNsYXNzIGxvYWRlciBvZiB0aGUgY2Fs
bGluZyBzZXJ2aWNlCglTdHJpbmcgcGFyZW50UGFja2FnZSA9IHBhcmVudC5nZXRQYWNrYWdlKCku
Z2V0TmFtZSgpOwoJQ2xhc3NMb2FkZXIgbG9hZGVyID0gU2VydmVyQ2xhc3NMb2FkZXIuZ2V0UGFj
a2FnZUxvYWRlcihwYXJlbnRQYWNrYWdlKTsJCQoJCgkvLyBMb2FkIG1lc3NhZ2UgcmVzb3VyY2Ug
YnVuZGxlIGZyb20gdGhhdCBwYWNrYWdlJ3MgY2xhc3MgbG9hZGVyCgkvLyBXaWxsIHNlYXJjaCBp
biB0aGUgZm9sbG93aW5nIG9yZGVyOgoJLy8gLSByZXNvdXJjZXMvbWVzc2FnZXNfZW5fVVMucHJv
cGVydGllcwoJLy8gLSByZXNvdXJjZXMvbWVzc2FnZXNfZW4ucHJvcGVydGllcwoJLy8gLSByZXNv
dXJjZXMvbWVzc2FnZXMucHJvcGVydGllcwoJUmVzb3VyY2VCdW5kbGUgbWVzc2FnZUJ1bmRsZSA9
IFJlc291cmNlQnVuZGxlLmdldEJ1bmRsZSgibWVzc2FnZXMiLCBMb2NhbGUuZ2V0RGVmYXVsdCgp
LCBsb2FkZXIpOwoJCglyZXR1cm4gbWVzc2FnZUJ1bmRsZTsKfQoKCgoKcHVibGljIHN0YXRpYyBT
dHJpbmcgZ2V0SmFyQnVuZGxlVmVyc2lvbihGaWxlIGphcikgewoJU3RyaW5nIHZlcnNpb24gPSAi
IjsKCQoJdHJ5IHsKCSAgIC8vIEdldCBqYXIgbWFuaWZlc3QKCSAgIEphcklucHV0U3RyZWFtIGph
clN0cmVhbSA9IG5ldyBKYXJJbnB1dFN0cmVhbShuZXcgRmlsZUlucHV0U3RyZWFtKGphcikpOwoJ
ICAgTWFuaWZlc3QgbWFuaWZlc3QgPSBqYXJTdHJlYW0uZ2V0TWFuaWZlc3QoKTsKCgkgICAvLyBF
eHRyYWN0IHZlcnNpb24gYXR0cmlidXRlIGZyb20gdGhlIG1hbmlmZXN0CgkgICBBdHRyaWJ1dGVz
IG1haW5BdHRyaWJzID0gbWFuaWZlc3QuZ2V0TWFpbkF0dHJpYnV0ZXMoKTsKCSAgIHZlcnNpb24g
PSBtYWluQXR0cmlicy5nZXRWYWx1ZSgiQnVuZGxlLVZlcnNpb24iKTsKCgl9IGNhdGNoIChFeGNl
cHRpb24gZSkgeyB9CglyZXR1cm4gdmVyc2lvbjsKfQoKCi8qKgogKiBbUmUtXWxvYWQgY29uZmln
dXJhdGlvbgogKi8JCnByaXZhdGUgc3RhdGljIHZvaWQgY29uZmlndXJlKCkgewoJCgl0cnkgewoJ
ICBpZiAoY29udGV4dCA9PSBudWxsKSB7CgkJICBjb250ZXh0ID0gbmV3IExvZ2dlckNvbnRleHQo
KTsKCSAgfQoKCSAgU3RyaW5nIHNsZjRqUGF0aCA9IE1EQy5jbGFzcy5nZXRQcm90ZWN0aW9uRG9t
YWluKCkuZ2V0Q29kZVNvdXJjZSgpLmdldExvY2F0aW9uKCkuZ2V0UGF0aCgpOwoJICBTdHJpbmcg
c2xmNGpWZXJzaW9uID0gZ2V0SmFyQnVuZGxlVmVyc2lvbihuZXcgamF2YS5pby5GaWxlKHNsZjRq
UGF0aCkpOwoJICBTdHJpbmcgbG9nYmFja1BhdGggPSBMb2dnZXJDb250ZXh0LmNsYXNzLmdldENs
YXNzTG9hZGVyKCkudG9TdHJpbmcoKTsKCSAgCgkgIGNvbS53bS51dGlsLkpvdXJuYWxMb2dnZXIu
bG9nKAoJCQkgIGNvbS53bS51dGlsLkpvdXJuYWxMb2dnZXIuSU5GTywKICAgICAgICAgICAgICBj
b20ud20udXRpbC5Kb3VybmFsTG9nZ2VyLkZBQ19GTE9XX1NWQywKICAgICAgICAgICAgICBjb20u
d20udXRpbC5Kb3VybmFsTG9nZ2VyLklORk8sCgkJCSAgIkxmeExvZzogVXNpbmcgc2xmNGotYXBp
IHYiICsgc2xmNGpWZXJzaW9uICsgIiBmcm9tICIgKyBzbGY0alBhdGgpOwkJICAKCSAgCgkJCSAg
Y29tLndtLnV0aWwuSm91cm5hbExvZ2dlci5sb2coCgkJCQkJICBjb20ud20udXRpbC5Kb3VybmFs
TG9nZ2VyLklORk8sCgkJICAgICAgICAgICAgICBjb20ud20udXRpbC5Kb3VybmFsTG9nZ2VyLkZB
Q19GTE9XX1NWQywKCQkgICAgICAgICAgICAgIGNvbS53bS51dGlsLkpvdXJuYWxMb2dnZXIuSU5G
TywKCQkJCQkgICJMZnhMb2c6IFVzaW5nIExvZ2JhY2sgZnJvbSAiICsgbG9nYmFja1BhdGgpOwoJ
ICAKCSAgSm9yYW5Db25maWd1cmF0b3IgY29uZmlndXJhdG9yID0gbmV3IEpvcmFuQ29uZmlndXJh
dG9yKCk7CgkgIGNvbmZpZ3VyYXRvci5zZXRDb250ZXh0KGNvbnRleHQpOwoJCgkgIGNvbnRleHQu
cmVzZXQoKTsgCgogICAgICAvLyBSZWFkIGV4dGVuZGVkIHNldHRpbmcgdG8gZGV0ZXJtaW5lIGNv
bmZpZyBmaWxlCgkgIFN0cmluZyBjb25maWdGaWxlTmFtZSA9IFN5c3RlbS5nZXRQcm9wZXJ0eSgi
d2F0dC5sZngubG9nLmNvbmZpZyIpOwoKCSAgLy8gSWYgbm9uZSBleGlzdHMsIHRoZW4gbGV0J3Mg
Y3JlYXRlIGEgZGVmYXVsdCBvbmUKCSAgaWYgKGNvbmZpZ0ZpbGVOYW1lID09IG51bGwgfHwgY29u
ZmlnRmlsZU5hbWUuaXNFbXB0eSgpKSB7CgkJICBjb25maWdGaWxlTmFtZSA9ICJwYWNrYWdlcy9M
RlhfTG9nZ2luZy9jb25maWcvbGZ4bG9nX2RlZmF1bHQueG1sIjsKCQkgIFN5c3RlbS5nZXRQcm9w
ZXJ0aWVzKCkucHV0KCJ3YXR0LmxmeC5sb2cuY29uZmlnIiwgY29uZmlnRmlsZU5hbWUpOwoJCSAg
Y29tLndtLnV0aWwuSm91cm5hbExvZ2dlci5sb2coCgkJCQkgIGNvbS53bS51dGlsLkpvdXJuYWxM
b2dnZXIuSU5GTywKCSAgICAgICAgICAgICAgY29tLndtLnV0aWwuSm91cm5hbExvZ2dlci5GQUNf
RkxPV19TVkMsCgkgICAgICAgICAgICAgIGNvbS53bS51dGlsLkpvdXJuYWxMb2dnZXIuSU5GTywK
CQkJCSAgIkxmeExvZzogVXNpbmcgZGVmYXVsdCBsb2dnZXIgY29uZmlndXJhdGlvbiIpOwoJICB9
ICAKCQkgIAoJICBGaWxlIGNvbmZpZ0ZpbGUgPSBuZXcgRmlsZShjb25maWdGaWxlTmFtZSk7Cgkg
IAoJICBpZiAoIWNvbmZpZ0ZpbGUuZXhpc3RzKCkpIHsKCQkgIC8vbG9nIGVycm9yIHRvIHNlcnZl
ciBsb2cKCQkgIGNvbS53bS51dGlsLkpvdXJuYWxMb2dnZXIubG9nKAoJCQkJICBjb20ud20udXRp
bC5Kb3VybmFsTG9nZ2VyLklORk8sCgkgICAgICAgICAgICAgIGNvbS53bS51dGlsLkpvdXJuYWxM
b2dnZXIuRkFDX0ZMT1dfU1ZDLAoJICAgICAgICAgICAgICBjb20ud20udXRpbC5Kb3VybmFsTG9n
Z2VyLklORk8sCgkJCQkgICJMZnhMb2c6IENhbid0IGZpbmQgIiArIGNvbmZpZ0ZpbGVOYW1lICsg
IiwgdXNpbmcgZGVmYXVsdCIpOwoJCSAgY29uZmlnRmlsZU5hbWUgPSAicGFja2FnZXMvTEZYX0xv
Z2dpbmcvY29uZmlnL2xmeGxvZ19kZWZhdWx0LnhtbCI7CgkJICBjb25maWdGaWxlID0gbmV3IEZp
bGUoY29uZmlnRmlsZU5hbWUpOwoJICB9CgkgIAoJICBjb20ud20udXRpbC5Kb3VybmFsTG9nZ2Vy
LmxvZygKCQkJICBjb20ud20udXRpbC5Kb3VybmFsTG9nZ2VyLklORk8sCiAgICAgICAgICAgICAg
Y29tLndtLnV0aWwuSm91cm5hbExvZ2dlci5GQUNfRkxPV19TVkMsCiAgICAgICAgICAgICAgY29t
LndtLnV0aWwuSm91cm5hbExvZ2dlci5JTkZPLAogICAgICAgICAgICAgICJMZnhMb2c6IExvYWRp
bmcgbG9nZ2VyIGNvbmZpZ3VyYXRpb246ICIrY29uZmlnRmlsZU5hbWUgKyAiOlxuIiArIGNvbnRl
eHQuZ2V0TG9nZ2VyTGlzdCgpLnRvU3RyaW5nKCkpOwoKCSAgLy8gTG9hZCB0aGUgY29uZmlndXJh
dGlvbgoJICBjb25maWd1cmF0b3IuZG9Db25maWd1cmUoY29uZmlnRmlsZSk7CgkgIGNvbmZpZ3Vy
ZWQgPSB0cnVlOwoJICAKCX0gY2F0Y2ggKEpvcmFuRXhjZXB0aW9uIGplKSB7CgkgICBqZS5wcmlu
dFN0YWNrVHJhY2UoKTsKCSAgIAoJfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsKCQljb20ud20udXRp
bC5Kb3VybmFsTG9nZ2VyLmxvZygKCQkJCSAgY29tLndtLnV0aWwuSm91cm5hbExvZ2dlci5JTkZP
LAoJICAgICAgICAgICAgICBjb20ud20udXRpbC5Kb3VybmFsTG9nZ2VyLkZBQ19GTE9XX1NWQywK
CSAgICAgICAgICAgICAgY29tLndtLnV0aWwuSm91cm5hbExvZ2dlci5FUlJPUiwKCSAgICAgICAg
ICAgICAgIkxmeExvZzogIiArIGUudG9TdHJpbmcoKSk7CgoJCWUucHJpbnRTdGFja1RyYWNlKCk7
Cgl9CgkKCVN0YXR1c1ByaW50ZXIucHJpbnRJbkNhc2VPZkVycm9yc09yV2FybmluZ3MoY29udGV4
dCk7CgkKfQoKCgovKioKICogQ29uZGl0aW9uYWxseSBjbGVhciB0aGUgTURDIGlmIHRoaXMgdGhy
ZWFkIHdhcyByZWN5Y2xlZCBpbiB0aGUgc2VydmljZQogKiB0aHJlYWQgcG9vbC4KICovCnB1Ymxp
YyBzdGF0aWMgdm9pZCBjb25kaXRpb25hbGx5Q2xlYXJNREMoKSB7CgkKCS8vIElmIHJvb3QgY29u
dGV4dCBJRCBoYXMgY2hhbmdlZAoJU3RyaW5nIHJvb3RDb250ZXh0SUQgPSBTZXJ2ZXJBUEkuZ2V0
QXVkaXRDb250ZXh0KClbMF07CglpZiAoIXJvb3RDb250ZXh0SUQuZXF1YWxzKGxhc3RSb290Q29u
dGV4dElELmdldCgpKSkgeyAKCQlNREMuY2xlYXIoKTsKCX0KCQoJLy8gVXBkYXRlIHRocmVhZCBs
b2NhbCBzdG9yYWdlIHdpdGggdGhlIGluaXRpYWwsIG9yIHVwZGF0ZWQgcm9vdCBjb250ZXh0IElE
CglsYXN0Um9vdENvbnRleHRJRC5zZXQocm9vdENvbnRleHRJRCk7CgkKCS8vIEFkZCBpbXBsaWNp
dCBtZXRhZGF0YSB0byBNREMKCWFkZEltcGxpY2l0TWV0YWRhdGEoKTsKfQoKCi8qKgogKiBQdXQg
YSBsaXN0IG9mIGVudHJpZXMgaW50byB0aGUgTURDCiAqLwpwcml2YXRlIHN0YXRpYyB2b2lkIHB1
dE1EQyhJRGF0YSBlbnRyaWVzKSB7CgkKCWlmIChlbnRyaWVzICE9IG51bGwpIHsKCQlJRGF0YUN1
cnNvciBlbnRyaWVzQ3Vyc29yID0gZW50cmllcy5nZXRDdXJzb3IoKTsKCQl3aGlsZSAoZW50cmll
c0N1cnNvci5uZXh0KCkpIHsKCQkJU3RyaW5nIGVudHJ5S2V5ID0gZW50cmllc0N1cnNvci5nZXRL
ZXkoKTsKCQkJU3RyaW5nIGVudHJ5VmFsdWUgPSAoU3RyaW5nKWVudHJpZXNDdXJzb3IuZ2V0VmFs
dWUoKTsKCQkJaWYgKGVudHJ5S2V5ICE9IG51bGwgJiYgZW50cnlWYWx1ZSAhPSBudWxsKSB7CgkJ
CQlNREMucHV0KGVudHJ5S2V5LCBlbnRyeVZhbHVlKTsKCQkJfQoJCX0KCX0KfQoKCi8qKgogKiBS
ZXR1cm4gYSBsaXN0IG9mIGVudHJpZXMgZnJvbSB0aGUgTURDCiAqLwpwcml2YXRlIHN0YXRpYyBJ
RGF0YSBnZXRNREMoU3RyaW5nW10gZW50cmllcykgewoKCUlEYXRhIGdvdEVudHJpZXMgPSBJRGF0
YUZhY3RvcnkuY3JlYXRlKCk7CglJRGF0YUN1cnNvciBnb3RFbnRyaWVzQ3Vyc29yID0gZ290RW50
cmllcy5nZXRDdXJzb3IoKTsKCWlmIChlbnRyaWVzICE9IG51bGwgJiYgZW50cmllcy5sZW5ndGgg
PiAwKSB7CgkJZm9yIChTdHJpbmcgZW50cnkgOiBlbnRyaWVzKSB7CgkJCUlEYXRhVXRpbC5wdXQo
Z290RW50cmllc0N1cnNvciwgZW50cnksIE1EQy5nZXQoZW50cnkpKTsKCQl9Cgl9CglyZXR1cm4g
Z290RW50cmllczsKfQoKCi8qKgogKiBSZW1vdmUgYSBsaXN0IG9mIGVudHJpZXMgZnJvbSB0aGUg
TURDIAogKiAKICogQHBhcmFtIGVudHJpZXMgYW4gYXJyYXkgb2YgTURDIGtleSBuYW1lcwogKi8K
cHJpdmF0ZSBzdGF0aWMgdm9pZCByZW1vdmVNREMoU3RyaW5nW10gZW50cmllcykgewoJCglpZiAo
ZW50cmllcyAhPSBudWxsICYmIGVudHJpZXMubGVuZ3RoID4gMCkgewoJCWZvciAoU3RyaW5nIGVu
dHJ5IDogZW50cmllcykgewoJCQlNREMucmVtb3ZlKGVudHJ5KTsKCQl9Cgl9Cn0KCgovKioKICog
UmVtb3ZlIGEgbGlzdCBvZiBlbnRyaWVzIGZyb20gdGhlIE1EQwogKiAKICogQHBhcmFtIGVudHJp
ZXMgYW4gZG9jdW1lbnQgb2YgTURDIGVudHJpZXMgKG9ubHkgdGhlIGtleSBuYW1lIGlzIHVzZWQg
dG8gcmVtb3ZlKQogKi8KcHJpdmF0ZSBzdGF0aWMgdm9pZCByZW1vdmVNREMoSURhdGEgZW50cmll
cykgewoJCglpZiAoZW50cmllcyAhPSBudWxsKSB7CgkJSURhdGFDdXJzb3IgZW50cmllc0N1cnNv
ciA9IGVudHJpZXMuZ2V0Q3Vyc29yKCk7CgkJd2hpbGUgKGVudHJpZXNDdXJzb3IubmV4dCgpKSB7
CgkJCVN0cmluZyBlbnRyeUtleSA9IGVudHJpZXNDdXJzb3IuZ2V0S2V5KCk7CgkJCU1EQy5yZW1v
dmUoZW50cnlLZXkpOwoJCX0KCX0KfQoKCi8qKgogKiBDbGVhciB0aGUgZW50aXJlIE1EQwogKi8K
cHJpdmF0ZSBzdGF0aWMgdm9pZCBjbGVhck1EQygpIHsKCU1EQy5jbGVhcigpOwp9CgoKLyoqCiAq
IEFkZHMgaW1wbGljaXQgbWV0YWRhdGEgdG8gTURDLgogKiAKICogVGhlIGZvbGxvd2luZyBmaWVs
ZHMgYXJlIGFkZGVkOgogKiAgIHBhY2thZ2UKICogICBzZXJ2aWNlCiAqICAgaG9zdAogKiAgIHVz
ZXIKICogICBzc25pZAogKiAKICovCnByaXZhdGUgc3RhdGljIHZvaWQgYWRkSW1wbGljaXRNZXRh
ZGF0YSgpIHsJCgoJLy8gQ2FsbGluZyBzZXJ2aWNlIG5hbWUKCS8vCgkvLyBOb3RlOiB0aGlzIGlz
IHRoZSBwYXJlbnQgc2VydmljZSB0aGF0IGludm9rZWQgdGhlIGxvZyBzZXJ2aWNlLgoJLy8gSWYg
dGhlcmUgaXMgbm8gcGFyZW50IHNlcnZpY2UsIHRoZW4gdGhlIGxvZyBzZXJ2aWNlIHdhcyAKCS8v
IGludm9rZWQgZGlyZWN0bHkgKGVnLiB2aWEgYWRtaW4gZ3VpIG9yIGRlc2lnbmVyKSwgc28gdXNl
CgkvLyB0aGUgbG9nIHNlcnZpY2UgaXRzZWxmIGFzIHRoZSBjYWxsaW5nIHNlcnZpY2UKCU5TU2Vy
dmljZSBwYXJlbnQgPSBTZXJ2aWNlLmdldENhbGxpbmdTZXJ2aWNlKCk7CglpZiAocGFyZW50ID09
IG51bGwpIHsKCQlwYXJlbnQgPSBTZXJ2aWNlLmdldFNlcnZpY2VFbnRyeSgpOwoJfQkJCglNREMu
cHV0KCJzZXJ2aWNlIiwgcGFyZW50LnRvU3RyaW5nKCkpOwoKCS8vIFBhY2thZ2UgbmFtZQoJTURD
LnB1dCgicGFja2FnZSIsIHBhcmVudC5nZXRQYWNrYWdlKCkuZ2V0TmFtZSgpKTsKCQoJLy8gSG9z
dG5hbWUKCVN0cmluZyBob3N0ID0gbnVsbDsKCXRyeSB7CgkJaG9zdCA9IEluZXRBZGRyZXNzLmdl
dExvY2FsSG9zdCgpLmdldEhvc3ROYW1lKCk7CgkJTURDLnB1dCgiaG9zdCIsIGhvc3QpOwoJfSBj
YXRjaCAoVW5rbm93bkhvc3RFeGNlcHRpb24gZSkgewoJCS8vIFRPRE8gQXV0by1nZW5lcmF0ZWQg
Y2F0Y2ggYmxvY2sKCX0KCQoJLy8gVXNlcgoJTURDLnB1dCgidXNlciIsIFNlcnZpY2UuZ2V0VXNl
cigpLnRvU3RyaW5nKCkpOwoJCgkvLyBTZXNzaW9uCglNREMucHV0KCJzc25pZCIsIFNlcnZpY2Uu
Z2V0U2Vzc2lvbigpLmdldFNlc3Npb25JRCgpKTsKCgkvLyBDdXJyZW50IGFuZCBSb290IENvbnRl
eHQgSURzCglTdHJpbmdbXSBjb250ZXh0SURzID0gU2VydmVyQVBJLmdldEF1ZGl0Q29udGV4dCgp
OwoJTURDLnB1dCgicm9vdENvbnRleHRJRCIsIGNvbnRleHRJRHNbMF0pOwoJLy8gbGVuZ3RoLTIg
YmVjYXVzZSB3ZSB3YW50IHRoZSBjdXJyZW50Q29udGV4dElEIG9mIHRoZSBzZXJ2aWNlCgkvLyB3
aGljaCBpcyBpbnZva2luZyB0aGUgbG9nIHNlcnZpY2UgKG5vdCB0aGUgY29udGV4dCBJRCBvZiB0
aGUgCgkvLyBsb2cgc2VydmljZSBpbnZvY2F0aW9uIGl0c2VsZikKCU1EQy5wdXQoImN1cnJlbnRD
b250ZXh0SUQiLCBjb250ZXh0SURzW2NvbnRleHRJRHMubGVuZ3RoLTJdKTsKCQp9CgoKLyoqCiAq
IExvZyBhIGxvZyBtZXNzYWdlCiAqIAogKiBUaGlzIGlzIHRoZSBmdW5kYW1lbnRhbCBsb2dnaW5n
IG1ldGhvZC4gQWxsIGxvZygpIGNhbGxzIGxlYWQgaGVyZS4KICogCiAqIEBwYXJhbSBsb2dnZXIg
LSBpZiBudWxsIHRoZW4gaXQgZGV0ZXJtaW5lcyB0aGUgY3VycmVudCBzZXJ2aWNlIG5hbWUKICog
QHBhcmFtIG1lc3NhZ2UgLSB0aGUgbG9nIG1lc3NhZ2UgdG8gbG9nCiAqIEBwYXJhbSBsZXZlbFN0
cmluZyAtIEVSUk9SLCBXQVJOLCBJTkZPLCBERUJVRywgb3IgVFJBQ0UKICogQHBhcmFtIGluaGVy
aXRNRENGcm9tUHJldmlvdXNJbnZva2UgLSB3aGV0aGVyIG9yIG5vdCB0byBpbmhlcml0IHRoZSBN
REMgZnJvbSBhIHJlY3ljbGVkIHRocmVhZC4KICovCnB1YmxpYyBzdGF0aWMgdm9pZCBsb2coU3Ry
aW5nIGxvZ2dlck5hbWUsIFN0cmluZyBtZXNzYWdlLCBMZXZlbCBsZXZlbCkgewoKCS8vIEVuc3Vy
ZSBjb25maWd1cmF0aW9uIGlzIGxvYWRlZAoJaWYgKCFjb25maWd1cmVkKSB7CgkJY29uZmlndXJl
KCk7Cgl9CgkKCS8vIElmIGxldmVsIGlzIGVtcHR5IHRoZW4gZGVmYXVsdCBpdCB0byBJTkZPCglp
ZiAobGV2ZWwgPT0gbnVsbCkgewoJCWxldmVsID0gTGV2ZWwuSU5GTzsKCX0KCQoJLy8gR2V0IHNl
cnZpY2UgdGhhdCBtYWRlIHRoZSBsb2cgc3RhdGVtZW50CglOU1NlcnZpY2UgcGFyZW50ID0gU2Vy
dmljZS5nZXRDYWxsaW5nU2VydmljZSgpOwoJaWYgKHBhcmVudCA9PSBudWxsKSB7CgkJcGFyZW50
ID0gU2VydmljZS5nZXRTZXJ2aWNlRW50cnkoKTsKCX0KCVN0cmluZyBwYXJlbnRQYWNrYWdlID0g
cGFyZW50LmdldFBhY2thZ2UoKS5nZXROYW1lKCk7CgkKCS8vIEdldCBkZWZhdWx0IGxvZ2dlciBu
YW1lIChiYXNlZCBvbiBzZXJ2aWNlIG5hbWUpIGlmIG5vbmUKCS8vIHdhcyBwcm92aWRlZAoJaWYg
KGxvZ2dlck5hbWUgPT0gbnVsbCB8fCBsb2dnZXJOYW1lLmlzRW1wdHkoKSkgewoJCS8vIE1ha2Ug
ZG90LWRlbGltaXRlZCBsb2dnZXIgbmFtZSAoZWcuIHBhY2thZ2UuZm9sZGVyLnN1YmZvbGRlci5z
ZXJ2aWNlKQoJCWxvZ2dlck5hbWUgPSBwYXJlbnQuZ2V0UGFja2FnZSgpLmdldE5hbWUoKSArICIu
IiArIHBhcmVudC50b1N0cmluZygpLnJlcGxhY2UoJzonLCAnLicpOwoJfQoJCgkvLyBDYXRjaC1h
bGwgLSBpZiBmb3Igc29tZSByZWFzb24gbG9nZ2VyIGlzIHN0aWxsIG51bGwsIG1ha2UgaXQgIm51
bGwiCgkvLyBOb3Qgc3VyZSB0aGlzIHdpbGwgZXZlciBoYXBwZW4sIGJ1dCBpZiBzbywgc2V0dGlu
ZyBpdCB0byB0aGUgc3RyaW5nCgkvLyAibnVsbCIgd2lsbCBhdCBsZWFzdCBlbnN1cmUgdGhlIG1l
c3NhZ2UgZ2V0cyB3cml0dGVuIHRvIGEgbG9nIGZpbGUKCS8vIHJhdGhlciB0aGFuIGp1c3QgZGlz
YXBwZWFyaW5nIHNpbGVudGx5LgoJaWYgKGxvZ2dlck5hbWUgPT0gbnVsbCB8fCBsb2dnZXJOYW1l
LmlzRW1wdHkoKSkgewoJCWxvZ2dlck5hbWUgPSAibnVsbCI7Cgl9CgkKCS8vIEdldCB0aGUgbG9n
Z2VyIG9iamVjdCBmb3IgdGhpcyBsb2dnZXIgbmFtZQoJb3JnLnNsZjRqLkxvZ2dlciBsb2dnZXIg
PSBjb250ZXh0LmdldExvZ2dlcihsb2dnZXJOYW1lKTsKCQoJLy8gR2V0IHRoZSBtZXNzYWdlIGZy
b20gdGhlIGNhdGFsb2cKCS8vaWYKCS8vQ2xhc3NMb2FkZXIgbG9hZGVyID0gU2VydmVyQ2xhc3NM
b2FkZXIuZ2V0UGFja2FnZUxvYWRlcihwYXJlbnRQYWNrYWdlKTsKCQoKCQoJLy8gTG9nIHRoZSBt
ZXNzYWdlCQoJdHJ5IHsKCQlzd2l0Y2gobGV2ZWwpIHsKCQkJY2FzZSBFUlJPUjogbG9nZ2VyLmVy
cm9yKG1lc3NhZ2UpOyBicmVhazsKCQkJY2FzZSBXQVJOOiAgbG9nZ2VyLndhcm4obWVzc2FnZSk7
IGJyZWFrOwoJCQljYXNlIElORk86ICBsb2dnZXIuaW5mbyhtZXNzYWdlKTsgYnJlYWs7CgkJCWNh
c2UgREVCVUc6IGxvZ2dlci5kZWJ1ZyhtZXNzYWdlKTsgYnJlYWs7CgkJCWNhc2UgVFJBQ0U6IGxv
Z2dlci50cmFjZShtZXNzYWdlKTsgYnJlYWs7CgkJfQoKCX0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7
CQoJCWNvbS53bS51dGlsLkpvdXJuYWxMb2dnZXIubG9nKDQsIDkwLCAxLCAiTGZ4TG9nOiBDb3Vs
ZCBub3QgbG9nIG1lc3NhZ2U6ICIgKyBlLnRvU3RyaW5nKCkpOwoJfQp9CgoKLyoqCiAqIExvZyBt
ZXRob2QgdG8gaW52b2tlIGRpcmVjdGx5IHZpYSBqYXZhIGNvZGUuCiAqLwpwdWJsaWMgc3RhdGlj
IHZvaWQgbG9nKFN0cmluZyBtZXNzYWdlKSB7Cglsb2dGcm9tSmF2YShudWxsLCBtZXNzYWdlLCBu
dWxsKTsKfQoKLyoqCiAqIAogKi8KcHVibGljIHN0YXRpYyB2b2lkIGxvZyhTdHJpbmcgbG9nZ2Vy
LCBTdHJpbmcgbWVzc2FnZSkgewoJbG9nRnJvbUphdmEobG9nZ2VyLCBtZXNzYWdlLCBudWxsKTsK
fQoKCi8qKgogKiBMb2cgbWV0aG9kIHRvIGludm9rZSBkaXJlY3RseSB2aWEgamF2YSBjb2RlLgog
Ki8KcHVibGljIHN0YXRpYyB2b2lkIGxvZyhTdHJpbmcgbWVzc2FnZSwgY2gucW9zLmxvZ2JhY2su
Y2xhc3NpYy5MZXZlbCBsZXZlbCkgewoJbG9nRnJvbUphdmEobnVsbCwgbWVzc2FnZSwgbGV2ZWwp
OyAvLyBMb2dnZXIgbmFtZSBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQKfQoKCnB1YmxpYyBzdGF0
aWMgdm9pZCBsb2dGcm9tSmF2YShTdHJpbmcgbG9nZ2VyLCBTdHJpbmcgbWVzc2FnZSwgY2gucW9z
LmxvZ2JhY2suY2xhc3NpYy5MZXZlbCBsZXZlbCkgewoJCglOU05hbWUgbG9nU2VydmljZSA9IE5T
TmFtZS5jcmVhdGUoImxmeC5sb2dnaW5nLnB1Yi5zZXJ2aWNlOmxvZyIpOwoJSURhdGEgaW5wdXQg
PSBJRGF0YUZhY3RvcnkuY3JlYXRlKG5ldyBTdHJpbmdbXVtdIHsKCQkJeyAibG9nZ2VyIiwgbG9n
Z2VyIH0sCgkJCXsgInRleHQiLCBtZXNzYWdlIH0sCgkJCXsgImxldmVsIiwgKGxldmVsID09IG51
bGwgPyBERUZBVUxUX0xFVkVMIDogbGV2ZWwudG9TdHJpbmcoKSkgfQoJfSk7CgkKCXRyeSB7CgkJ
U2VydmljZS5kb0ludm9rZShsb2dTZXJ2aWNlLCBpbnB1dCk7Cgl9IGNhdGNoIChFeGNlcHRpb24g
ZSkgewoJCWNvbS53bS51dGlsLkpvdXJuYWxMb2dnZXIubG9nKAoJCQkJICBjb20ud20udXRpbC5K
b3VybmFsTG9nZ2VyLklORk8sCgkgICAgICAgICAgICAgIGNvbS53bS51dGlsLkpvdXJuYWxMb2dn
ZXIuRkFDX0ZMT1dfU1ZDLAoJICAgICAgICAgICAgICBjb20ud20udXRpbC5Kb3VybmFsTG9nZ2Vy
LkVSUk9SLAoJICAgICAgICAgICAgICAiTGZ4TG9nOiAiICsgZS50b1N0cmluZygpKTsKCX0KfQoJ
</value>
  <value name="encodeutf8">true</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
    <value>com.wm.app.b2b.server.ServerAPI</value>
    <value>com.wm.app.b2b.server.Server</value>
    <value>com.wm.app.b2b.server.ServiceThread</value>
    <value>com.wm.lang.ns.*</value>
    <value>org.slf4j.Logger</value>
    <value>org.slf4j.LoggerFactory</value>
    <value>org.slf4j.MDC</value>
    <value>ch.qos.logback.classic.LoggerContext</value>
    <value>ch.qos.logback.classic.selector.DefaultContextSelector</value>
    <value>ch.qos.logback.classic.joran.JoranConfigurator</value>
    <value>ch.qos.logback.core.joran.spi.JoranException</value>
    <value>ch.qos.logback.core.rolling.RollingFileAppender</value>
    <value>ch.qos.logback.core.util.StatusPrinter</value>
    <value>ch.qos.logback.classic.AsyncAppender</value>
    <value>ch.qos.logback.classic.Level</value>
    <value>java.util.concurrent.ConcurrentHashMap</value>
    <value>java.io.File</value>
    <value>java.io.InputStream</value>
    <value>java.io.FileInputStream</value>
    <value>java.io.OutputStream</value>
    <value>java.io.FileOutputStream</value>
    <value>java.util.jar.*</value>
    <value>java.net.InetAddress</value>
    <value>java.net.UnknownHostException</value>
    <value>java.util.Arrays</value>
    <value>java.util.ResourceBundle</value>
    <value>java.util.Locale</value>
    <value>java.util.regex.Matcher</value>
    <value>java.util.regex.Pattern</value>
    <value>com.wm.app.b2b.server.InvokeState</value>
    <value>com.wm.app.b2b.server.ServerClassLoader</value>
  </array>
</Values>
